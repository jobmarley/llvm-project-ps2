//===----------------------------------------------------------------------===//
//
// This file declares the PS2VPU specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_PS2VPU_SPARCSUBTARGET_H
#define LLVM_LIB_TARGET_PS2VPU_SPARCSUBTARGET_H

#include "PS2VPUFrameLowering.h"
#include "PS2VPUISelLowering.h"
#include "PS2VPUInstrInfo.h"
#include "llvm/TargetParser/Triple.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "ps2vpuGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class PS2VPUSubtarget : public PS2VPUGenSubtargetInfo {
  Triple TargetTriple;
  virtual void anchor();

  PS2VPUInstrInfo InstrInfo;
  PS2VPUTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;
  PS2VPUFrameLowering FrameLowering;
  InstrItineraryData InstrItins;

public:
  PS2VPUSubtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS, const TargetMachine &TM, bool is64bit);

  const PS2VPUInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const PS2VPURegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const PS2VPUTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  bool enableMachineScheduler() const override;

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  PS2VPUSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  /// The 64-bit ABI uses biased stack and frame pointers, so the stack frame
  /// of the current function is the area from [%sp+BIAS] to [%fp+BIAS].
  //int64_t getStackPointerBias() const { return is64Bit() ? 2047 : 0; }

  /// Given a actual stack size as determined by FrameInfo, this function
  /// returns adjusted framesize which includes space for register window
  /// spills and arguments.
  int getAdjustedFrameSize(int stackSize) const;

  bool isTargetLinux() const { return TargetTriple.isOSLinux(); }

  /// getInstrItins - Return the instruction itineraries based on subtarget
  /// selection.
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};

} // end namespace llvm

#endif
